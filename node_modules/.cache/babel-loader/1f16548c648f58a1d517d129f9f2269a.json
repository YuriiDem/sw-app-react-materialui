{"ast":null,"code":"var _jsxFileName = \"D:\\\\my\\\\Projects\\\\Star Wars Wiki App\\\\star-wars-app\\\\src\\\\containers\\\\SpeciesPage\\\\SpeciesPage.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { getApiResources } from '@utils/network';\nimport { API_SPECIES } from '@constants/api';\nimport { getSpeciesId, getSpeciesImg, getPageId } from '@services/getPeopleData';\nimport PeopleList from '@components/PeoplePage/PeopleList';\nimport PeopleNav from '@components/PeoplePage/PeopleNav';\nimport { withErrorApi } from '@hoc-helpers/withErrorApi';\nimport { useQueryParams } from '@hooks/useQueryParams';\nimport { API_SPECIES_SEARCH } from '@constants/api';\nimport SearchBar from '@components/SearchBar';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Box from '@material-ui/core/Box';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction SpeciesPage({\n  setApiError\n}) {\n  _s();\n\n  const [species, setSpecies] = useState(null);\n  const [prev, setPrev] = useState(null);\n  const [next, setNext] = useState(null);\n  const [counterPage, setCounterPage] = useState(1);\n  const query = useQueryParams();\n  const queryPage = query.get('page');\n\n  async function getResources(url) {\n    const res = await getApiResources(url);\n\n    if (res) {\n      const speciesList = res.results.map(({\n        name,\n        url\n      }) => {\n        const id = getSpeciesId(url);\n        const img = getSpeciesImg(id);\n        return {\n          id,\n          name,\n          img\n        };\n      });\n      setSpecies(speciesList);\n      setPrev(res.previous);\n      setNext(res.next);\n      setCounterPage(getPageId(url));\n      setApiError(false);\n    } else {\n      setApiError(true);\n    }\n  }\n\n  useEffect(() => {\n    getResources(API_SPECIES + queryPage);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Species\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PeopleNav, {\n      resource: 'species',\n      getResources: getResources,\n      prev: prev,\n      next: next,\n      counterPage: counterPage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SearchBar, {\n      url: API_SPECIES_SEARCH,\n      getId: getSpeciesId,\n      getImg: getSpeciesImg,\n      link: 'species'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), species && /*#__PURE__*/_jsxDEV(PeopleList, {\n      data: species,\n      link: 'species'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n\n_s(SpeciesPage, \"A41TEaivXCeae4EfclOaakE3QxY=\", false, function () {\n  return [useQueryParams];\n});\n\n_c = SpeciesPage;\nSpeciesPage.propTypes = {\n  setApiError: PropTypes.func,\n  getId: PropTypes.func,\n  getImg: PropTypes.func,\n  data: PropTypes.array,\n  resource: PropTypes.string,\n  url: PropTypes.string,\n  link: PropTypes.string\n};\nexport default _c2 = withErrorApi(SpeciesPage);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"SpeciesPage\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["D:/my/Projects/Star Wars Wiki App/star-wars-app/src/containers/SpeciesPage/SpeciesPage.jsx"],"names":["useState","useEffect","PropTypes","getApiResources","API_SPECIES","getSpeciesId","getSpeciesImg","getPageId","PeopleList","PeopleNav","withErrorApi","useQueryParams","API_SPECIES_SEARCH","SearchBar","CircularProgress","Box","SpeciesPage","setApiError","species","setSpecies","prev","setPrev","next","setNext","counterPage","setCounterPage","query","queryPage","get","getResources","url","res","speciesList","results","map","name","id","img","previous","propTypes","func","getId","getImg","data","array","resource","string","link"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { getApiResources } from '@utils/network';\r\n\r\nimport { API_SPECIES } from '@constants/api';\r\nimport { getSpeciesId, getSpeciesImg, getPageId } from '@services/getPeopleData';\r\nimport PeopleList from '@components/PeoplePage/PeopleList';\r\nimport PeopleNav from '@components/PeoplePage/PeopleNav';\r\nimport { withErrorApi } from '@hoc-helpers/withErrorApi';\r\nimport { useQueryParams } from '@hooks/useQueryParams';\r\nimport { API_SPECIES_SEARCH } from '@constants/api';\r\nimport SearchBar from '@components/SearchBar';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Box from '@material-ui/core/Box';\r\n\r\n\r\nfunction SpeciesPage({ setApiError }) {\r\n  const [species, setSpecies] = useState(null);\r\n\r\n  const [prev, setPrev] = useState(null);\r\n  const [next, setNext] = useState(null);\r\n\r\n  const [counterPage, setCounterPage] = useState(1);\r\n\r\n  const query = useQueryParams();\r\n  const queryPage = query.get('page');\r\n\r\n\r\n  async function getResources(url) {\r\n    const res = await getApiResources(url);\r\n\r\n    if (res) {\r\n      const speciesList = res.results.map(({ name, url }) => {\r\n        const id = getSpeciesId(url);\r\n        const img = getSpeciesImg(id);\r\n\r\n        return {\r\n          id,\r\n          name,\r\n          img\r\n        }\r\n      });\r\n\r\n      setSpecies(speciesList);\r\n\r\n      setPrev(res.previous);\r\n      setNext(res.next);\r\n      setCounterPage(getPageId(url));\r\n      setApiError(false);\r\n    } else {\r\n      setApiError(true);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    getResources(API_SPECIES + queryPage);\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <h2>Species</h2>\r\n      <PeopleNav\r\n        resource={'species'}\r\n        getResources={getResources}\r\n        prev={prev}\r\n        next={next}\r\n        counterPage={counterPage}\r\n      />\r\n\r\n      <SearchBar url={API_SPECIES_SEARCH} getId={getSpeciesId} getImg={getSpeciesImg} link={'species'} />\r\n\r\n      {species && (\r\n        <PeopleList data={species} link={'species'} />\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nSpeciesPage.propTypes = {\r\n  setApiError: PropTypes.func,\r\n  getId: PropTypes.func,\r\n  getImg: PropTypes.func,\r\n  data: PropTypes.array,\r\n  resource: PropTypes.string,\r\n  url: PropTypes.string,\r\n  link: PropTypes.string,\r\n}\r\n\r\nexport default withErrorApi(SpeciesPage);"]},"metadata":{},"sourceType":"module"}