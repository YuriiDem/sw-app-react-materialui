{"ast":null,"code":"var _jsxFileName = \"D:\\\\my\\\\Projects\\\\Star Wars Wiki App\\\\star-wars-app\\\\src\\\\containers\\\\PeoplePage\\\\PeoplePage.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { getApiResources } from '@utils/network';\nimport { API_PEOPLE } from '@constants/api';\nimport { API_PERSON_SEARCH } from '@constants/api';\nimport { getPeopleId, getPeopleImg, getPageId } from '@services/getPeopleData';\nimport PeopleList from '@components/PeoplePage/PeopleList';\nimport Typography from '@material-ui/core/Typography';\nimport PeopleNav from '@components/PeoplePage/PeopleNav';\nimport SearchBar from '@components/SearchBar';\nimport { withErrorApi } from '@hoc-helpers/withErrorApi';\nimport { useQueryParams } from '@hooks/useQueryParams';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction PeoplePage({\n  setApiError\n}) {\n  _s();\n\n  const [people, setPeople] = useState(null); // prev && next page \n\n  const [prev, setPrev] = useState(null);\n  const [next, setNext] = useState(null);\n  const [counterPage, setCounterPage] = useState(1);\n  const query = useQueryParams();\n  const queryPage = query.get('page');\n\n  async function getResources(url) {\n    const res = await getApiResources(url);\n\n    if (res) {\n      const peopleList = res.results.map(({\n        name,\n        url\n      }) => {\n        const id = getPeopleId(url);\n        const img = getPeopleImg(id);\n        return {\n          id,\n          name,\n          img\n        };\n      });\n      setPeople(peopleList);\n      setPrev(res.previous);\n      setNext(res.next);\n      setCounterPage(getPageId(url));\n      setApiError(false);\n    } else {\n      setApiError(true);\n    }\n  }\n\n  useEffect(() => {\n    getResources(API_PEOPLE + queryPage);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h5\",\n      children: \"Characters\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PeopleNav, {\n      resource: 'people',\n      getResources: getResources,\n      prev: prev,\n      next: next,\n      counterPage: counterPage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SearchBar, {\n      url: API_PERSON_SEARCH,\n      getId: getPeopleId,\n      getImg: getPeopleImg,\n      link: 'people'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), people && /*#__PURE__*/_jsxDEV(PeopleList, {\n      data: people,\n      link: 'people'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n\n_s(PeoplePage, \"vg4qhPvP6+1Ulv8KgYdrJtTOBdM=\", false, function () {\n  return [useQueryParams];\n});\n\n_c = PeoplePage;\nPeoplePage.propTypes = {\n  setApiError: PropTypes.func,\n  getId: PropTypes.func,\n  getImg: PropTypes.func,\n  data: PropTypes.array,\n  resource: PropTypes.string,\n  url: PropTypes.string,\n  link: PropTypes.string\n};\nexport default _c2 = withErrorApi(PeoplePage);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"PeoplePage\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["D:/my/Projects/Star Wars Wiki App/star-wars-app/src/containers/PeoplePage/PeoplePage.jsx"],"names":["useState","useEffect","PropTypes","getApiResources","API_PEOPLE","API_PERSON_SEARCH","getPeopleId","getPeopleImg","getPageId","PeopleList","Typography","PeopleNav","SearchBar","withErrorApi","useQueryParams","PeoplePage","setApiError","people","setPeople","prev","setPrev","next","setNext","counterPage","setCounterPage","query","queryPage","get","getResources","url","res","peopleList","results","map","name","id","img","previous","propTypes","func","getId","getImg","data","array","resource","string","link"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { getApiResources } from '@utils/network';\r\nimport { API_PEOPLE } from '@constants/api';\r\nimport { API_PERSON_SEARCH } from '@constants/api';\r\nimport { getPeopleId, getPeopleImg, getPageId } from '@services/getPeopleData';\r\nimport PeopleList from '@components/PeoplePage/PeopleList';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport PeopleNav from '@components/PeoplePage/PeopleNav';\r\nimport SearchBar from '@components/SearchBar';\r\nimport { withErrorApi } from '@hoc-helpers/withErrorApi';\r\nimport { useQueryParams } from '@hooks/useQueryParams';\r\n\r\n\r\nfunction PeoplePage({ setApiError }) {\r\n  const [people, setPeople] = useState(null);\r\n\r\n  // prev && next page \r\n  const [prev, setPrev] = useState(null);\r\n  const [next, setNext] = useState(null);\r\n\r\n  const [counterPage, setCounterPage] = useState(1);\r\n\r\n  const query = useQueryParams();\r\n  const queryPage = query.get('page');\r\n\r\n\r\n\r\n  async function getResources(url) {\r\n    const res = await getApiResources(url);\r\n\r\n    if (res) {\r\n      const peopleList = res.results.map(({ name, url }) => {\r\n        const id = getPeopleId(url);\r\n        const img = getPeopleImg(id);\r\n\r\n        return {\r\n          id,\r\n          name,\r\n          img\r\n        }\r\n      });\r\n\r\n      setPeople(peopleList);\r\n\r\n      setPrev(res.previous);\r\n      setNext(res.next);\r\n      setCounterPage(getPageId(url));\r\n      setApiError(false);\r\n    } else {\r\n      setApiError(true);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    getResources(API_PEOPLE + queryPage);\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Typography variant=\"h5\">Characters</Typography>\r\n      <PeopleNav\r\n        resource={'people'}\r\n        getResources={getResources}\r\n        prev={prev}\r\n        next={next}\r\n        counterPage={counterPage}\r\n      />\r\n\r\n      <SearchBar url={API_PERSON_SEARCH} getId={getPeopleId} getImg={getPeopleImg} link={'people'} />\r\n\r\n      {people && (\r\n        <PeopleList data={people} link={'people'} />\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nPeoplePage.propTypes = {\r\n  setApiError: PropTypes.func,\r\n  getId: PropTypes.func,\r\n  getImg: PropTypes.func,\r\n  data: PropTypes.array,\r\n  resource: PropTypes.string,\r\n  url: PropTypes.string,\r\n  link: PropTypes.string,\r\n}\r\n\r\nexport default withErrorApi(PeoplePage);\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}