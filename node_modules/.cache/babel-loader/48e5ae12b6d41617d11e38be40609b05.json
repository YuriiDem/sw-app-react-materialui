{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { getApiResources } from '@utils/network';\nimport { API_PERSON } from '@constants/api';\nimport { withErrorApi } from '@hoc-helpers/withErrorApi';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction PersonPage({\n  match,\n  setApiError\n}) {\n  _s();\n\n  const [personInfo, setPersonInfo] = useState(null);\n  const [personName, setPersonName] = useState(null);\n  useEffect(() => {\n    (async () => {\n      const id = match.params.id;\n      const res = await getApiResources(`${API_PERSON}/${id}/`);\n\n      if (res) {\n        setPersonInfo([{\n          title: 'Height',\n          data: res.height\n        }, {\n          title: 'Mass',\n          data: res.mass\n        }, {\n          title: 'Gender',\n          data: res.gender\n        }, {\n          title: 'Hair color',\n          data: res.hair_color\n        }, {\n          title: 'Eye color',\n          data: res.eye_color\n        }, {\n          title: 'Skin color',\n          data: res.skin_color\n        }, {\n          title: 'Birth year',\n          data: res.birth_year\n        }]);\n        setPersonName(res.name); // res.films\n\n        setApiError(false);\n      } else {\n        setApiError(true);\n      }\n    })();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: \"PersonPage\"\n  }, void 0, false);\n}\n\n_s(PersonPage, \"F8wzj8iQuMyGoZsSHaj/IjRQSBM=\");\n\n_c = PersonPage;\nPersonPage.propTypes = {\n  setApiError: PropTypes.func,\n  match: PropTypes.object\n};\nexport default _c2 = withErrorApi(PersonPage);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"PersonPage\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["D:/my/Projects/Star Wars Wiki App/star-wars-app/src/containers/PersonPage/PersonPage.jsx"],"names":["useState","useEffect","PropTypes","getApiResources","API_PERSON","withErrorApi","PersonPage","match","setApiError","personInfo","setPersonInfo","personName","setPersonName","id","params","res","title","data","height","mass","gender","hair_color","eye_color","skin_color","birth_year","name","propTypes","func","object"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,eAAT,QAAgC,gBAAhC;AACA,SAASC,UAAT,QAA2B,gBAA3B;AACA,SAASC,YAAT,QAA6B,2BAA7B;;;;AAEA,SAASC,UAAT,CAAoB;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAApB,EAA4C;AAAA;;AAC1C,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BV,QAAQ,CAAC,IAAD,CAA5C;AACA,QAAM,CAACW,UAAD,EAAaC,aAAb,IAA8BZ,QAAQ,CAAC,IAAD,CAA5C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,KAAC,YAAY;AACX,YAAMY,EAAE,GAAGN,KAAK,CAACO,MAAN,CAAaD,EAAxB;AACA,YAAME,GAAG,GAAG,MAAMZ,eAAe,CAAE,GAAEC,UAAW,IAAGS,EAAG,GAArB,CAAjC;;AAEA,UAAIE,GAAJ,EAAS;AACPL,QAAAA,aAAa,CAAC,CACZ;AAAEM,UAAAA,KAAK,EAAE,QAAT;AAAmBC,UAAAA,IAAI,EAAEF,GAAG,CAACG;AAA7B,SADY,EAEZ;AAAEF,UAAAA,KAAK,EAAE,MAAT;AAAiBC,UAAAA,IAAI,EAAEF,GAAG,CAACI;AAA3B,SAFY,EAGZ;AAAEH,UAAAA,KAAK,EAAE,QAAT;AAAmBC,UAAAA,IAAI,EAAEF,GAAG,CAACK;AAA7B,SAHY,EAIZ;AAAEJ,UAAAA,KAAK,EAAE,YAAT;AAAuBC,UAAAA,IAAI,EAAEF,GAAG,CAACM;AAAjC,SAJY,EAKZ;AAAEL,UAAAA,KAAK,EAAE,WAAT;AAAsBC,UAAAA,IAAI,EAAEF,GAAG,CAACO;AAAhC,SALY,EAMZ;AAAEN,UAAAA,KAAK,EAAE,YAAT;AAAuBC,UAAAA,IAAI,EAAEF,GAAG,CAACQ;AAAjC,SANY,EAOZ;AAAEP,UAAAA,KAAK,EAAE,YAAT;AAAuBC,UAAAA,IAAI,EAAEF,GAAG,CAACS;AAAjC,SAPY,CAAD,CAAb;AAUAZ,QAAAA,aAAa,CAACG,GAAG,CAACU,IAAL,CAAb,CAXO,CAaP;;AAEAjB,QAAAA,WAAW,CAAC,KAAD,CAAX;AACD,OAhBD,MAgBO;AACLA,QAAAA,WAAW,CAAC,IAAD,CAAX;AACD;AACF,KAvBD;AAwBD,GAzBQ,EAyBN,EAzBM,CAAT;AA4BA,sBACE;AAAA;AAAA,mBADF;AAGD;;GAnCQF,U;;KAAAA,U;AAqCTA,UAAU,CAACoB,SAAX,GAAuB;AACrBlB,EAAAA,WAAW,EAAEN,SAAS,CAACyB,IADF;AAErBpB,EAAAA,KAAK,EAAEL,SAAS,CAAC0B;AAFI,CAAvB;AAKA,qBAAevB,YAAY,CAACC,UAAD,CAA3B","sourcesContent":["import { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { getApiResources } from '@utils/network';\r\nimport { API_PERSON } from '@constants/api';\r\nimport { withErrorApi } from '@hoc-helpers/withErrorApi';\r\n\r\nfunction PersonPage({ match, setApiError }) {\r\n  const [personInfo, setPersonInfo] = useState(null);\r\n  const [personName, setPersonName] = useState(null);\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      const id = match.params.id;\r\n      const res = await getApiResources(`${API_PERSON}/${id}/`);\r\n\r\n      if (res) {\r\n        setPersonInfo([\r\n          { title: 'Height', data: res.height },\r\n          { title: 'Mass', data: res.mass },\r\n          { title: 'Gender', data: res.gender},\r\n          { title: 'Hair color', data: res.hair_color},\r\n          { title: 'Eye color', data: res.eye_color },\r\n          { title: 'Skin color', data: res.skin_color },\r\n          { title: 'Birth year', data: res.birth_year},\r\n        ]);\r\n\r\n        setPersonName(res.name);\r\n\r\n        // res.films\r\n\r\n        setApiError(false);\r\n      } else {\r\n        setApiError(true);\r\n      }\r\n    })();\r\n  }, []);\r\n\r\n\r\n  return (\r\n    <>PersonPage</>\r\n  );\r\n}\r\n\r\nPersonPage.propTypes = {\r\n  setApiError: PropTypes.func,\r\n  match: PropTypes.object,\r\n}\r\n\r\nexport default withErrorApi(PersonPage);"]},"metadata":{},"sourceType":"module"}