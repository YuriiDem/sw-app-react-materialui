{"ast":null,"code":"var _jsxFileName = \"D:\\\\my\\\\Projects\\\\Star Wars Wiki App\\\\star-wars-app\\\\src\\\\containers\\\\PlanetsPage\\\\PlanetsPage.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { getApiResources } from '@utils/network';\nimport { API_PLANETS } from '@constants/api';\nimport { API_PLANET_SEARCH } from '@constants/api';\nimport { getPlanetsId, getPlanetsImg, getPageId } from '@services/getPeopleData';\nimport PeopleList from '@components/PeoplePage/PeopleList';\nimport PeopleNav from '@components/PeoplePage/PeopleNav';\nimport { withErrorApi } from '@hoc-helpers/withErrorApi';\nimport { useQueryParams } from '@hooks/useQueryParams';\nimport SearchBar from '@components/SearchBar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction PlanetsPage({\n  setApiError\n}) {\n  _s();\n\n  const [planets, setPlanets] = useState(null); // prev && next page \n\n  const [prev, setPrev] = useState(null);\n  const [next, setNext] = useState(null);\n  const [counterPage, setCounterPage] = useState(1);\n  const query = useQueryParams();\n  const queryPage = query.get('page');\n\n  async function getResources(url) {\n    const res = await getApiResources(url);\n\n    if (res) {\n      const planetsList = res.results.map(({\n        name,\n        url\n      }) => {\n        const id = getPlanetsId(url);\n        const img = getPlanetsImg(id);\n        return {\n          id,\n          name,\n          img\n        };\n      });\n      setPlanets(planetsList);\n      setPrev(res.previous);\n      setNext(res.next);\n      setCounterPage(getPageId(url));\n      setApiError(false);\n    } else {\n      setApiError(true);\n    }\n  }\n\n  useEffect(() => {\n    getResources(API_PLANETS + queryPage);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Planets\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PeopleNav, {\n      resource: 'planets',\n      getResources: getResources,\n      prev: prev,\n      next: next,\n      counterPage: counterPage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SearchBar, {\n      url: API_PLANET_SEARCH,\n      getId: getPlanetsId,\n      getImg: getPlanetsImg,\n      link: 'planets'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), planets && /*#__PURE__*/_jsxDEV(PeopleList, {\n      data: planets,\n      link: 'planets'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n\n_s(PlanetsPage, \"YgMpjz009omsNL6GH2vwmETrwZU=\", false, function () {\n  return [useQueryParams];\n});\n\n_c = PlanetsPage;\nPlanetsPage.propTypes = {\n  planets: PropTypes.array\n};\nexport default _c2 = withErrorApi(PlanetsPage);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"PlanetsPage\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["D:/my/Projects/Star Wars Wiki App/star-wars-app/src/containers/PlanetsPage/PlanetsPage.jsx"],"names":["useState","useEffect","PropTypes","getApiResources","API_PLANETS","API_PLANET_SEARCH","getPlanetsId","getPlanetsImg","getPageId","PeopleList","PeopleNav","withErrorApi","useQueryParams","SearchBar","PlanetsPage","setApiError","planets","setPlanets","prev","setPrev","next","setNext","counterPage","setCounterPage","query","queryPage","get","getResources","url","res","planetsList","results","map","name","id","img","previous","propTypes","array"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { getApiResources } from '@utils/network';\r\nimport { API_PLANETS } from '@constants/api';\r\nimport { API_PLANET_SEARCH } from '@constants/api';\r\nimport { getPlanetsId, getPlanetsImg, getPageId } from '@services/getPeopleData';\r\nimport PeopleList from '@components/PeoplePage/PeopleList';\r\nimport PeopleNav from '@components/PeoplePage/PeopleNav';\r\nimport { withErrorApi } from '@hoc-helpers/withErrorApi';\r\nimport { useQueryParams } from '@hooks/useQueryParams';\r\nimport SearchBar from '@components/SearchBar';\r\n\r\n\r\nfunction PlanetsPage({ setApiError }) {\r\n  const [planets, setPlanets] = useState(null);\r\n\r\n  // prev && next page \r\n  const [prev, setPrev] = useState(null);\r\n  const [next, setNext] = useState(null);\r\n\r\n  const [counterPage, setCounterPage] = useState(1);\r\n\r\n  const query = useQueryParams();\r\n  const queryPage = query.get('page');\r\n\r\n  async function getResources(url) {\r\n    const res = await getApiResources(url);\r\n\r\n    if (res) {\r\n      const planetsList = res.results.map(({ name, url }) => {\r\n        const id = getPlanetsId(url);\r\n        const img = getPlanetsImg(id);\r\n\r\n        return {\r\n          id,\r\n          name,\r\n          img\r\n        }\r\n      });\r\n\r\n      setPlanets(planetsList);\r\n\r\n      setPrev(res.previous);\r\n      setNext(res.next);\r\n      setCounterPage(getPageId(url));\r\n      setApiError(false);\r\n    } else {\r\n      setApiError(true);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    getResources(API_PLANETS + queryPage);\r\n  }, []);\r\n\r\n\r\n  return (\r\n    <>\r\n      <h2>Planets</h2>\r\n\r\n      <PeopleNav\r\n        resource={'planets'}\r\n        getResources={getResources}\r\n        prev={prev}\r\n        next={next}\r\n        counterPage={counterPage}\r\n      />\r\n\r\n      <SearchBar url={API_PLANET_SEARCH} getId={getPlanetsId} getImg={getPlanetsImg} link={'planets'} />\r\n\r\n      {planets && (\r\n        <PeopleList data={planets} link={'planets'} />\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nPlanetsPage.propTypes = {\r\n  planets: PropTypes.array\r\n}\r\n\r\nexport default withErrorApi(PlanetsPage);"]},"metadata":{},"sourceType":"module"}