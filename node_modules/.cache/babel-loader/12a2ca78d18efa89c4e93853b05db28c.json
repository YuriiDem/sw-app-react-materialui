{"ast":null,"code":"var _jsxFileName = \"D:\\\\my\\\\Projects\\\\Star Wars Wiki App\\\\star-wars-app\\\\src\\\\containers\\\\PlanetPage\\\\PlanetPage.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { getApiResources } from '@utils/network';\nimport { API_PLANETS } from '@constants/api';\nimport { withErrorApi } from '@hoc-helpers/withErrorApi';\nimport { data } from 'browserslist';\nimport { getPlanetsImg } from '@services/getPeopleData';\nimport PlanetImage from '@components/PlanetsPage/PlanetImage';\nimport PlanetInfo from '@components/PlanetsPage/PlanetInfo';\nimport Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction PlanetPage({\n  match,\n  setApiError\n}) {\n  _s();\n\n  const [planetInfo, setPlanetInfo] = useState(null);\n  const [planetName, setPlanetName] = useState(null);\n  const [planetImage, setPlanetImage] = useState(null);\n  useEffect(() => {\n    (async () => {\n      const id = match.params.id;\n      const res = await getApiResources(`${API_PLANETS}/${id}/`);\n\n      if (res) {\n        setPlanetInfo([{\n          title: 'Climate',\n          data: res.climate\n        }, {\n          title: 'Terrain',\n          data: res.terrain\n        }, {\n          title: 'Rotation period',\n          data: res.rotation_period\n        }, {\n          title: 'Orbital period',\n          data: res.orbital_period\n        }, {\n          title: 'Diameter',\n          data: res.diameter\n        }, {\n          title: 'Surface water',\n          data: res.surface_water\n        }, {\n          title: 'Population',\n          data: res.population\n        }]);\n        setPlanetName(res.name);\n        setPlanetImage(getPlanetsImg(id)); // res.films\n\n        setApiError(false);\n      } else {\n        setApiError(true);\n      }\n    })();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      mt: 5,\n      children: /*#__PURE__*/_jsxDEV(Paper, {\n        variant: \"outlined\",\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          component: \"div\",\n          display: \"flex\",\n          p: 1,\n          m: 1,\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            spacing: 5,\n            alignItems: \"center\",\n            children: [/*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              children: /*#__PURE__*/_jsxDEV(Box, {\n                children: /*#__PURE__*/_jsxDEV(PlanetImage, {\n                  planetImage: planetImage,\n                  planetName: planetName\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 56,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 55,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              children: /*#__PURE__*/_jsxDEV(Box, {\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"h4\",\n                  children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: planetName\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 62,\n                    columnNumber: 44\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 62,\n                  columnNumber: 19\n                }, this), planetInfo && /*#__PURE__*/_jsxDEV(PlanetInfo, {\n                  planetInfo: planetInfo\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 63,\n                  columnNumber: 34\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 61,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(PlanetPage, \"1HE+roBfrJ+xmtHsIkXSLJXJ9GE=\");\n\n_c = PlanetPage;\nPlanetPage.propTypes = {\n  setApiError: PropTypes.func,\n  match: PropTypes.object\n};\nexport default _c2 = withErrorApi(PlanetPage);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"PlanetPage\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["D:/my/Projects/Star Wars Wiki App/star-wars-app/src/containers/PlanetPage/PlanetPage.jsx"],"names":["useState","useEffect","PropTypes","getApiResources","API_PLANETS","withErrorApi","data","getPlanetsImg","PlanetImage","PlanetInfo","Box","Grid","Paper","Typography","PlanetPage","match","setApiError","planetInfo","setPlanetInfo","planetName","setPlanetName","planetImage","setPlanetImage","id","params","res","title","climate","terrain","rotation_period","orbital_period","diameter","surface_water","population","name","propTypes","func","object"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { getApiResources } from '@utils/network';\r\nimport { API_PLANETS } from '@constants/api';\r\nimport { withErrorApi } from '@hoc-helpers/withErrorApi';\r\nimport { data } from 'browserslist';\r\nimport { getPlanetsImg } from '@services/getPeopleData';\r\nimport PlanetImage from '@components/PlanetsPage/PlanetImage';\r\nimport PlanetInfo from '@components/PlanetsPage/PlanetInfo';\r\nimport Box from '@material-ui/core/Box';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\n\r\nfunction PlanetPage({ match, setApiError }) {\r\n  const [planetInfo, setPlanetInfo] = useState(null);\r\n  const [planetName, setPlanetName] = useState(null);\r\n  const [planetImage, setPlanetImage] = useState(null);\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      const id = match.params.id;\r\n      const res = await getApiResources(`${API_PLANETS}/${id}/`);\r\n\r\n      if (res) {\r\n        setPlanetInfo([\r\n          { title: 'Climate', data: res.climate },\r\n          { title: 'Terrain', data: res.terrain },\r\n          { title: 'Rotation period', data: res.rotation_period },\r\n          { title: 'Orbital period', data: res.orbital_period },\r\n          { title: 'Diameter', data: res.diameter },\r\n          { title: 'Surface water', data: res.surface_water },\r\n          { title: 'Population', data: res.population },\r\n        ]);\r\n\r\n        setPlanetName(res.name);\r\n        setPlanetImage(getPlanetsImg(id));\r\n        // res.films\r\n\r\n        setApiError(false);\r\n      } else {\r\n        setApiError(true);\r\n      }\r\n    })();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Box mt={5} >\r\n        <Paper variant=\"outlined\">\r\n          <Box component=\"div\" display=\"flex\" p={1} m={1} >\r\n            <Grid container spacing={5} alignItems=\"center\">\r\n              <Grid item>\r\n                <Box >\r\n                  <PlanetImage planetImage={planetImage} planetName={planetName} />\r\n                </Box>\r\n              </Grid>\r\n\r\n              <Grid item >\r\n                <Box >\r\n                  <Typography variant=\"h4\"><strong>{planetName}</strong></Typography>\r\n                  {planetInfo && <PlanetInfo planetInfo={planetInfo} />}\r\n                </Box>\r\n              </Grid>\r\n            </Grid>\r\n          </Box>\r\n        </Paper>\r\n      </Box>\r\n    </>\r\n  );\r\n}\r\n\r\nPlanetPage.propTypes = {\r\n  setApiError: PropTypes.func,\r\n  match: PropTypes.object,\r\n}\r\n\r\nexport default withErrorApi(PlanetPage);"]},"metadata":{},"sourceType":"module"}